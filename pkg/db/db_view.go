// Code generated by tailscale/cmd/viewer; DO NOT EDIT.

package db

import (
	"encoding/json"
	"errors"
	"net/netip"

	"tailscale.com/tailcfg"
	"tailscale.com/types/views"
)

//go:generate go run tailscale.com/cmd/cloner  -clonefunc=false -type=Data,Service,Volume,ImageRepo,Artifact,DockerNetwork,DockerEndpoint,TailscaleNetwork,EndpointPort

// View returns a read-only view of Data.
func (p *Data) View() DataView {
	return DataView{ж: p}
}

// DataView provides a read-only view over Data.
//
// Its methods should only be called if `Valid()` returns true.
type DataView struct {
	// ж is the underlying mutable value, named with a hard-to-type
	// character that looks pointy like a pointer.
	// It is named distinctively to make you think of how dangerous it is to escape
	// to callers. You must not let callers be able to mutate it.
	ж *Data
}

// Valid reports whether v's underlying value is non-nil.
func (v DataView) Valid() bool { return v.ж != nil }

// AsStruct returns a clone of the underlying value which aliases no memory with
// the original.
func (v DataView) AsStruct() *Data {
	if v.ж == nil {
		return nil
	}
	return v.ж.Clone()
}

func (v DataView) MarshalJSON() ([]byte, error) { return json.Marshal(v.ж) }

func (v *DataView) UnmarshalJSON(b []byte) error {
	if v.ж != nil {
		return errors.New("already initialized")
	}
	if len(b) == 0 {
		return nil
	}
	var x Data
	if err := json.Unmarshal(b, &x); err != nil {
		return err
	}
	v.ж = &x
	return nil
}

func (v DataView) DataVersion() int { return v.ж.DataVersion }

func (v DataView) Services() views.MapFn[string, *Service, ServiceView] {
	return views.MapFnOf(v.ж.Services, func(t *Service) ServiceView {
		return t.View()
	})
}

func (v DataView) Images() views.MapFn[ImageRepoName, *ImageRepo, ImageRepoView] {
	return views.MapFnOf(v.ж.Images, func(t *ImageRepo) ImageRepoView {
		return t.View()
	})
}

func (v DataView) Volumes() views.MapFn[string, *Volume, VolumeView] {
	return views.MapFnOf(v.ж.Volumes, func(t *Volume) VolumeView {
		return t.View()
	})
}

func (v DataView) DockerNetworks() views.MapFn[string, *DockerNetwork, DockerNetworkView] {
	return views.MapFnOf(v.ж.DockerNetworks, func(t *DockerNetwork) DockerNetworkView {
		return t.View()
	})
}

// A compilation failure here means this code must be regenerated, with the command at the top of this file.
var _DataViewNeedsRegeneration = Data(struct {
	DataVersion    int
	Services       map[string]*Service
	Images         map[ImageRepoName]*ImageRepo
	Volumes        map[string]*Volume
	DockerNetworks map[string]*DockerNetwork
}{})

// View returns a read-only view of Service.
func (p *Service) View() ServiceView {
	return ServiceView{ж: p}
}

// ServiceView provides a read-only view over Service.
//
// Its methods should only be called if `Valid()` returns true.
type ServiceView struct {
	// ж is the underlying mutable value, named with a hard-to-type
	// character that looks pointy like a pointer.
	// It is named distinctively to make you think of how dangerous it is to escape
	// to callers. You must not let callers be able to mutate it.
	ж *Service
}

// Valid reports whether v's underlying value is non-nil.
func (v ServiceView) Valid() bool { return v.ж != nil }

// AsStruct returns a clone of the underlying value which aliases no memory with
// the original.
func (v ServiceView) AsStruct() *Service {
	if v.ж == nil {
		return nil
	}
	return v.ж.Clone()
}

func (v ServiceView) MarshalJSON() ([]byte, error) { return json.Marshal(v.ж) }

func (v *ServiceView) UnmarshalJSON(b []byte) error {
	if v.ж != nil {
		return errors.New("already initialized")
	}
	if len(b) == 0 {
		return nil
	}
	var x Service
	if err := json.Unmarshal(b, &x); err != nil {
		return err
	}
	v.ж = &x
	return nil
}

func (v ServiceView) Name() string             { return v.ж.Name }
func (v ServiceView) ServiceType() ServiceType { return v.ж.ServiceType }
func (v ServiceView) Generation() int          { return v.ж.Generation }
func (v ServiceView) LatestGeneration() int    { return v.ж.LatestGeneration }

func (v ServiceView) Artifacts() views.MapFn[ArtifactName, *Artifact, ArtifactView] {
	return views.MapFnOf(v.ж.Artifacts, func(t *Artifact) ArtifactView {
		return t.View()
	})
}
func (v ServiceView) SvcNetwork() views.ValuePointer[SvcNetwork] {
	return views.ValuePointerOf(v.ж.SvcNetwork)
}

func (v ServiceView) Macvlan() views.ValuePointer[MacvlanNetwork] {
	return views.ValuePointerOf(v.ж.Macvlan)
}

func (v ServiceView) TSNet() TailscaleNetworkView { return v.ж.TSNet.View() }

// A compilation failure here means this code must be regenerated, with the command at the top of this file.
var _ServiceViewNeedsRegeneration = Service(struct {
	Name             string
	ServiceType      ServiceType
	Generation       int
	LatestGeneration int
	Artifacts        ArtifactStore
	SvcNetwork       *SvcNetwork
	Macvlan          *MacvlanNetwork
	TSNet            *TailscaleNetwork
}{})

// View returns a read-only view of Volume.
func (p *Volume) View() VolumeView {
	return VolumeView{ж: p}
}

// VolumeView provides a read-only view over Volume.
//
// Its methods should only be called if `Valid()` returns true.
type VolumeView struct {
	// ж is the underlying mutable value, named with a hard-to-type
	// character that looks pointy like a pointer.
	// It is named distinctively to make you think of how dangerous it is to escape
	// to callers. You must not let callers be able to mutate it.
	ж *Volume
}

// Valid reports whether v's underlying value is non-nil.
func (v VolumeView) Valid() bool { return v.ж != nil }

// AsStruct returns a clone of the underlying value which aliases no memory with
// the original.
func (v VolumeView) AsStruct() *Volume {
	if v.ж == nil {
		return nil
	}
	return v.ж.Clone()
}

func (v VolumeView) MarshalJSON() ([]byte, error) { return json.Marshal(v.ж) }

func (v *VolumeView) UnmarshalJSON(b []byte) error {
	if v.ж != nil {
		return errors.New("already initialized")
	}
	if len(b) == 0 {
		return nil
	}
	var x Volume
	if err := json.Unmarshal(b, &x); err != nil {
		return err
	}
	v.ж = &x
	return nil
}

func (v VolumeView) Name() string { return v.ж.Name }
func (v VolumeView) Src() string  { return v.ж.Src }
func (v VolumeView) Path() string { return v.ж.Path }
func (v VolumeView) Type() string { return v.ж.Type }
func (v VolumeView) Opts() string { return v.ж.Opts }
func (v VolumeView) Deps() string { return v.ж.Deps }

// A compilation failure here means this code must be regenerated, with the command at the top of this file.
var _VolumeViewNeedsRegeneration = Volume(struct {
	Name string
	Src  string
	Path string
	Type string
	Opts string
	Deps string
}{})

// View returns a read-only view of ImageRepo.
func (p *ImageRepo) View() ImageRepoView {
	return ImageRepoView{ж: p}
}

// ImageRepoView provides a read-only view over ImageRepo.
//
// Its methods should only be called if `Valid()` returns true.
type ImageRepoView struct {
	// ж is the underlying mutable value, named with a hard-to-type
	// character that looks pointy like a pointer.
	// It is named distinctively to make you think of how dangerous it is to escape
	// to callers. You must not let callers be able to mutate it.
	ж *ImageRepo
}

// Valid reports whether v's underlying value is non-nil.
func (v ImageRepoView) Valid() bool { return v.ж != nil }

// AsStruct returns a clone of the underlying value which aliases no memory with
// the original.
func (v ImageRepoView) AsStruct() *ImageRepo {
	if v.ж == nil {
		return nil
	}
	return v.ж.Clone()
}

func (v ImageRepoView) MarshalJSON() ([]byte, error) { return json.Marshal(v.ж) }

func (v *ImageRepoView) UnmarshalJSON(b []byte) error {
	if v.ж != nil {
		return errors.New("already initialized")
	}
	if len(b) == 0 {
		return nil
	}
	var x ImageRepo
	if err := json.Unmarshal(b, &x); err != nil {
		return err
	}
	v.ж = &x
	return nil
}

func (v ImageRepoView) Refs() views.Map[ImageRef, ImageManifest] { return views.MapOf(v.ж.Refs) }

// A compilation failure here means this code must be regenerated, with the command at the top of this file.
var _ImageRepoViewNeedsRegeneration = ImageRepo(struct {
	Refs map[ImageRef]ImageManifest
}{})

// View returns a read-only view of Artifact.
func (p *Artifact) View() ArtifactView {
	return ArtifactView{ж: p}
}

// ArtifactView provides a read-only view over Artifact.
//
// Its methods should only be called if `Valid()` returns true.
type ArtifactView struct {
	// ж is the underlying mutable value, named with a hard-to-type
	// character that looks pointy like a pointer.
	// It is named distinctively to make you think of how dangerous it is to escape
	// to callers. You must not let callers be able to mutate it.
	ж *Artifact
}

// Valid reports whether v's underlying value is non-nil.
func (v ArtifactView) Valid() bool { return v.ж != nil }

// AsStruct returns a clone of the underlying value which aliases no memory with
// the original.
func (v ArtifactView) AsStruct() *Artifact {
	if v.ж == nil {
		return nil
	}
	return v.ж.Clone()
}

func (v ArtifactView) MarshalJSON() ([]byte, error) { return json.Marshal(v.ж) }

func (v *ArtifactView) UnmarshalJSON(b []byte) error {
	if v.ж != nil {
		return errors.New("already initialized")
	}
	if len(b) == 0 {
		return nil
	}
	var x Artifact
	if err := json.Unmarshal(b, &x); err != nil {
		return err
	}
	v.ж = &x
	return nil
}

func (v ArtifactView) Refs() views.Map[ArtifactRef, string] { return views.MapOf(v.ж.Refs) }

// A compilation failure here means this code must be regenerated, with the command at the top of this file.
var _ArtifactViewNeedsRegeneration = Artifact(struct {
	Refs map[ArtifactRef]string
}{})

// View returns a read-only view of DockerNetwork.
func (p *DockerNetwork) View() DockerNetworkView {
	return DockerNetworkView{ж: p}
}

// DockerNetworkView provides a read-only view over DockerNetwork.
//
// Its methods should only be called if `Valid()` returns true.
type DockerNetworkView struct {
	// ж is the underlying mutable value, named with a hard-to-type
	// character that looks pointy like a pointer.
	// It is named distinctively to make you think of how dangerous it is to escape
	// to callers. You must not let callers be able to mutate it.
	ж *DockerNetwork
}

// Valid reports whether v's underlying value is non-nil.
func (v DockerNetworkView) Valid() bool { return v.ж != nil }

// AsStruct returns a clone of the underlying value which aliases no memory with
// the original.
func (v DockerNetworkView) AsStruct() *DockerNetwork {
	if v.ж == nil {
		return nil
	}
	return v.ж.Clone()
}

func (v DockerNetworkView) MarshalJSON() ([]byte, error) { return json.Marshal(v.ж) }

func (v *DockerNetworkView) UnmarshalJSON(b []byte) error {
	if v.ж != nil {
		return errors.New("already initialized")
	}
	if len(b) == 0 {
		return nil
	}
	var x DockerNetwork
	if err := json.Unmarshal(b, &x); err != nil {
		return err
	}
	v.ж = &x
	return nil
}

func (v DockerNetworkView) NetworkID() string         { return v.ж.NetworkID }
func (v DockerNetworkView) NetNS() string             { return v.ж.NetNS }
func (v DockerNetworkView) IPv4Gateway() netip.Prefix { return v.ж.IPv4Gateway }
func (v DockerNetworkView) IPv4Range() netip.Prefix   { return v.ж.IPv4Range }

func (v DockerNetworkView) Endpoints() views.MapFn[string, *DockerEndpoint, DockerEndpointView] {
	return views.MapFnOf(v.ж.Endpoints, func(t *DockerEndpoint) DockerEndpointView {
		return t.View()
	})
}

func (v DockerNetworkView) EndpointAddrs() views.Map[string, netip.Prefix] {
	return views.MapOf(v.ж.EndpointAddrs)
}

func (v DockerNetworkView) PortMap() views.MapFn[string, *EndpointPort, EndpointPortView] {
	return views.MapFnOf(v.ж.PortMap, func(t *EndpointPort) EndpointPortView {
		return t.View()
	})
}

// A compilation failure here means this code must be regenerated, with the command at the top of this file.
var _DockerNetworkViewNeedsRegeneration = DockerNetwork(struct {
	NetworkID     string
	NetNS         string
	IPv4Gateway   netip.Prefix
	IPv4Range     netip.Prefix
	Endpoints     map[string]*DockerEndpoint
	EndpointAddrs map[string]netip.Prefix
	PortMap       map[string]*EndpointPort
}{})

// View returns a read-only view of DockerEndpoint.
func (p *DockerEndpoint) View() DockerEndpointView {
	return DockerEndpointView{ж: p}
}

// DockerEndpointView provides a read-only view over DockerEndpoint.
//
// Its methods should only be called if `Valid()` returns true.
type DockerEndpointView struct {
	// ж is the underlying mutable value, named with a hard-to-type
	// character that looks pointy like a pointer.
	// It is named distinctively to make you think of how dangerous it is to escape
	// to callers. You must not let callers be able to mutate it.
	ж *DockerEndpoint
}

// Valid reports whether v's underlying value is non-nil.
func (v DockerEndpointView) Valid() bool { return v.ж != nil }

// AsStruct returns a clone of the underlying value which aliases no memory with
// the original.
func (v DockerEndpointView) AsStruct() *DockerEndpoint {
	if v.ж == nil {
		return nil
	}
	return v.ж.Clone()
}

func (v DockerEndpointView) MarshalJSON() ([]byte, error) { return json.Marshal(v.ж) }

func (v *DockerEndpointView) UnmarshalJSON(b []byte) error {
	if v.ж != nil {
		return errors.New("already initialized")
	}
	if len(b) == 0 {
		return nil
	}
	var x DockerEndpoint
	if err := json.Unmarshal(b, &x); err != nil {
		return err
	}
	v.ж = &x
	return nil
}

func (v DockerEndpointView) EndpointID() string { return v.ж.EndpointID }
func (v DockerEndpointView) IPv4() netip.Prefix { return v.ж.IPv4 }

// A compilation failure here means this code must be regenerated, with the command at the top of this file.
var _DockerEndpointViewNeedsRegeneration = DockerEndpoint(struct {
	EndpointID string
	IPv4       netip.Prefix
}{})

// View returns a read-only view of TailscaleNetwork.
func (p *TailscaleNetwork) View() TailscaleNetworkView {
	return TailscaleNetworkView{ж: p}
}

// TailscaleNetworkView provides a read-only view over TailscaleNetwork.
//
// Its methods should only be called if `Valid()` returns true.
type TailscaleNetworkView struct {
	// ж is the underlying mutable value, named with a hard-to-type
	// character that looks pointy like a pointer.
	// It is named distinctively to make you think of how dangerous it is to escape
	// to callers. You must not let callers be able to mutate it.
	ж *TailscaleNetwork
}

// Valid reports whether v's underlying value is non-nil.
func (v TailscaleNetworkView) Valid() bool { return v.ж != nil }

// AsStruct returns a clone of the underlying value which aliases no memory with
// the original.
func (v TailscaleNetworkView) AsStruct() *TailscaleNetwork {
	if v.ж == nil {
		return nil
	}
	return v.ж.Clone()
}

func (v TailscaleNetworkView) MarshalJSON() ([]byte, error) { return json.Marshal(v.ж) }

func (v *TailscaleNetworkView) UnmarshalJSON(b []byte) error {
	if v.ж != nil {
		return errors.New("already initialized")
	}
	if len(b) == 0 {
		return nil
	}
	var x TailscaleNetwork
	if err := json.Unmarshal(b, &x); err != nil {
		return err
	}
	v.ж = &x
	return nil
}

func (v TailscaleNetworkView) Interface() string              { return v.ж.Interface }
func (v TailscaleNetworkView) Version() string                { return v.ж.Version }
func (v TailscaleNetworkView) ExitNode() string               { return v.ж.ExitNode }
func (v TailscaleNetworkView) Tags() views.Slice[string]      { return views.SliceOf(v.ж.Tags) }
func (v TailscaleNetworkView) StableID() tailcfg.StableNodeID { return v.ж.StableID }

// A compilation failure here means this code must be regenerated, with the command at the top of this file.
var _TailscaleNetworkViewNeedsRegeneration = TailscaleNetwork(struct {
	Interface string
	Version   string
	ExitNode  string
	Tags      []string
	StableID  tailcfg.StableNodeID
}{})

// View returns a read-only view of EndpointPort.
func (p *EndpointPort) View() EndpointPortView {
	return EndpointPortView{ж: p}
}

// EndpointPortView provides a read-only view over EndpointPort.
//
// Its methods should only be called if `Valid()` returns true.
type EndpointPortView struct {
	// ж is the underlying mutable value, named with a hard-to-type
	// character that looks pointy like a pointer.
	// It is named distinctively to make you think of how dangerous it is to escape
	// to callers. You must not let callers be able to mutate it.
	ж *EndpointPort
}

// Valid reports whether v's underlying value is non-nil.
func (v EndpointPortView) Valid() bool { return v.ж != nil }

// AsStruct returns a clone of the underlying value which aliases no memory with
// the original.
func (v EndpointPortView) AsStruct() *EndpointPort {
	if v.ж == nil {
		return nil
	}
	return v.ж.Clone()
}

func (v EndpointPortView) MarshalJSON() ([]byte, error) { return json.Marshal(v.ж) }

func (v *EndpointPortView) UnmarshalJSON(b []byte) error {
	if v.ж != nil {
		return errors.New("already initialized")
	}
	if len(b) == 0 {
		return nil
	}
	var x EndpointPort
	if err := json.Unmarshal(b, &x); err != nil {
		return err
	}
	v.ж = &x
	return nil
}

func (v EndpointPortView) EndpointID() string { return v.ж.EndpointID }
func (v EndpointPortView) Port() uint16       { return v.ж.Port }

// A compilation failure here means this code must be regenerated, with the command at the top of this file.
var _EndpointPortViewNeedsRegeneration = EndpointPort(struct {
	EndpointID string
	Port       uint16
}{})
