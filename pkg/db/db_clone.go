// Copyright (c) Tailscale Inc & AUTHORS
// SPDX-License-Identifier: BSD-3-Clause

// Code generated by tailscale.com/cmd/cloner; DO NOT EDIT.

package db

import (
	"maps"
	"net/netip"

	"tailscale.com/tailcfg"
	"tailscale.com/types/ptr"
)

// Clone makes a deep copy of Data.
// The result aliases no memory with the original.
func (src *Data) Clone() *Data {
	if src == nil {
		return nil
	}
	dst := new(Data)
	*dst = *src
	if dst.Services != nil {
		dst.Services = map[string]*Service{}
		for k, v := range src.Services {
			if v == nil {
				dst.Services[k] = nil
			} else {
				dst.Services[k] = v.Clone()
			}
		}
	}
	if dst.Images != nil {
		dst.Images = map[ImageRepoName]*ImageRepo{}
		for k, v := range src.Images {
			if v == nil {
				dst.Images[k] = nil
			} else {
				dst.Images[k] = v.Clone()
			}
		}
	}
	if dst.Volumes != nil {
		dst.Volumes = map[string]*Volume{}
		for k, v := range src.Volumes {
			if v == nil {
				dst.Volumes[k] = nil
			} else {
				dst.Volumes[k] = ptr.To(*v)
			}
		}
	}
	if dst.DockerNetworks != nil {
		dst.DockerNetworks = map[string]*DockerNetwork{}
		for k, v := range src.DockerNetworks {
			if v == nil {
				dst.DockerNetworks[k] = nil
			} else {
				dst.DockerNetworks[k] = v.Clone()
			}
		}
	}
	return dst
}

// A compilation failure here means this code must be regenerated, with the command at the top of this file.
var _DataCloneNeedsRegeneration = Data(struct {
	DataVersion    int
	Services       map[string]*Service
	Images         map[ImageRepoName]*ImageRepo
	Volumes        map[string]*Volume
	DockerNetworks map[string]*DockerNetwork
}{})

// Clone makes a deep copy of Service.
// The result aliases no memory with the original.
func (src *Service) Clone() *Service {
	if src == nil {
		return nil
	}
	dst := new(Service)
	*dst = *src
	if dst.Artifacts != nil {
		dst.Artifacts = map[ArtifactName]*Artifact{}
		for k, v := range src.Artifacts {
			if v == nil {
				dst.Artifacts[k] = nil
			} else {
				dst.Artifacts[k] = v.Clone()
			}
		}
	}
	if dst.SvcNetwork != nil {
		dst.SvcNetwork = ptr.To(*src.SvcNetwork)
	}
	if dst.Macvlan != nil {
		dst.Macvlan = ptr.To(*src.Macvlan)
	}
	dst.TSNet = src.TSNet.Clone()
	return dst
}

// A compilation failure here means this code must be regenerated, with the command at the top of this file.
var _ServiceCloneNeedsRegeneration = Service(struct {
	Name             string
	ServiceType      ServiceType
	Generation       int
	LatestGeneration int
	Artifacts        ArtifactStore
	SvcNetwork       *SvcNetwork
	Macvlan          *MacvlanNetwork
	TSNet            *TailscaleNetwork
}{})

// Clone makes a deep copy of Volume.
// The result aliases no memory with the original.
func (src *Volume) Clone() *Volume {
	if src == nil {
		return nil
	}
	dst := new(Volume)
	*dst = *src
	return dst
}

// A compilation failure here means this code must be regenerated, with the command at the top of this file.
var _VolumeCloneNeedsRegeneration = Volume(struct {
	Name string
	Src  string
	Path string
	Type string
	Opts string
	Deps string
}{})

// Clone makes a deep copy of ImageRepo.
// The result aliases no memory with the original.
func (src *ImageRepo) Clone() *ImageRepo {
	if src == nil {
		return nil
	}
	dst := new(ImageRepo)
	*dst = *src
	dst.Refs = maps.Clone(src.Refs)
	return dst
}

// A compilation failure here means this code must be regenerated, with the command at the top of this file.
var _ImageRepoCloneNeedsRegeneration = ImageRepo(struct {
	Refs map[ImageRef]ImageManifest
}{})

// Clone makes a deep copy of Artifact.
// The result aliases no memory with the original.
func (src *Artifact) Clone() *Artifact {
	if src == nil {
		return nil
	}
	dst := new(Artifact)
	*dst = *src
	dst.Refs = maps.Clone(src.Refs)
	return dst
}

// A compilation failure here means this code must be regenerated, with the command at the top of this file.
var _ArtifactCloneNeedsRegeneration = Artifact(struct {
	Refs map[ArtifactRef]string
}{})

// Clone makes a deep copy of DockerNetwork.
// The result aliases no memory with the original.
func (src *DockerNetwork) Clone() *DockerNetwork {
	if src == nil {
		return nil
	}
	dst := new(DockerNetwork)
	*dst = *src
	if dst.Endpoints != nil {
		dst.Endpoints = map[string]*DockerEndpoint{}
		for k, v := range src.Endpoints {
			if v == nil {
				dst.Endpoints[k] = nil
			} else {
				dst.Endpoints[k] = ptr.To(*v)
			}
		}
	}
	dst.EndpointAddrs = maps.Clone(src.EndpointAddrs)
	if dst.PortMap != nil {
		dst.PortMap = map[string]*EndpointPort{}
		for k, v := range src.PortMap {
			if v == nil {
				dst.PortMap[k] = nil
			} else {
				dst.PortMap[k] = ptr.To(*v)
			}
		}
	}
	return dst
}

// A compilation failure here means this code must be regenerated, with the command at the top of this file.
var _DockerNetworkCloneNeedsRegeneration = DockerNetwork(struct {
	NetworkID     string
	NetNS         string
	IPv4Gateway   netip.Prefix
	IPv4Range     netip.Prefix
	Endpoints     map[string]*DockerEndpoint
	EndpointAddrs map[string]netip.Prefix
	PortMap       map[string]*EndpointPort
}{})

// Clone makes a deep copy of DockerEndpoint.
// The result aliases no memory with the original.
func (src *DockerEndpoint) Clone() *DockerEndpoint {
	if src == nil {
		return nil
	}
	dst := new(DockerEndpoint)
	*dst = *src
	return dst
}

// A compilation failure here means this code must be regenerated, with the command at the top of this file.
var _DockerEndpointCloneNeedsRegeneration = DockerEndpoint(struct {
	EndpointID string
	IPv4       netip.Prefix
}{})

// Clone makes a deep copy of TailscaleNetwork.
// The result aliases no memory with the original.
func (src *TailscaleNetwork) Clone() *TailscaleNetwork {
	if src == nil {
		return nil
	}
	dst := new(TailscaleNetwork)
	*dst = *src
	dst.Tags = append(src.Tags[:0:0], src.Tags...)
	return dst
}

// A compilation failure here means this code must be regenerated, with the command at the top of this file.
var _TailscaleNetworkCloneNeedsRegeneration = TailscaleNetwork(struct {
	Interface string
	Version   string
	ExitNode  string
	Tags      []string
	StableID  tailcfg.StableNodeID
}{})

// Clone makes a deep copy of EndpointPort.
// The result aliases no memory with the original.
func (src *EndpointPort) Clone() *EndpointPort {
	if src == nil {
		return nil
	}
	dst := new(EndpointPort)
	*dst = *src
	return dst
}

// A compilation failure here means this code must be regenerated, with the command at the top of this file.
var _EndpointPortCloneNeedsRegeneration = EndpointPort(struct {
	EndpointID string
	Port       uint16
}{})
